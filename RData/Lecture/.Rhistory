df_csv_exam1 <- read.csv("../Doit_R-master/Data/csv_exam.csv")
#앞에서부터 6행깢 출력, default
head(df_csv_exam1)
#앞에서부터 10행까지 출력
head(df_csv_exam1, 10)
#뒤에서부터 6행까지 출력, default
tail(df_csv_exam1)
df_csv_exam1 <- read.csv("../Doit_R-master/Data/csv_exam.csv")
#뒤에서부터 10행까지 출력
tail(df_csv_exam1, 10)
dim(df_csv_exam1)
#데이터 뷰어창에서 확인하기
View(df_csv_exam1)
#데이터 뷰어창에서 확인하기
View(df_csv_exam1)
#데이터의 행 / 열 확인하기
dim(df_csv_exam1)
#데이터 뷰어창에서 확인하기
View(df_csv_exam1)
str(df_csv_exam1)
#요약 통계량 산출하기
summary(df_csv_exam1)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
tail(mpg)
dim(mpg)
str(mpg)
summart(mpg)
summary(mpg)
View(mpg)
?mpg
ggplot2::mpg
#데이터 프레임 생성
df_var_change1 <- data.frame(var51 <- c(1, 2, 3),
var52 <- c(2, 3, 2))
df_var_change1
#데이터 프레임 생성
df_var_change1 <- data.frame(var51 = c(1, 2, 3),
var52 = c(2, 3, 2))
df_var_change1
#패키지 설치 및 로드
install.packages("dplyr")
library(dplyr)
df_var_change2 <- df_var_change1
df_var_change2
#패키지 설치 및 로드
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
#데이터 프레임 생성
df_var_change1 <- data.frame(var51 = c(1, 2, 3),
var52 = c(2, 3, 2))
df_var_change1
df_var_change2 <- df_var_change1
df_var_change2
#변수명 바꾸기
df_var_change2 <- rename(df_var_change2, v2 = var52)
df_var_change2
#변수명 바꾸면서 새 데이터프레임 만들기
df_var_change3 <- rename(df_var_change1, v2 = var52)
df_var_change3
df_var_change1
mpg <- as.data.frame(ggplot2::mpg)
mpg
View(mpg)
mpg <- rename(mpg, cty=city, hwy=highway)
mpg <- rename(mpg, city = cty, highway = hwy)
head(mpg)
summary(mpg)
str(mpg)
dim(mpg)
?mpg
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4, 3, 8),
var52 = c(2, 6, 1))
df_var_derived
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4, 3, 8),
var52 = c(2, 6, 1))
df_var_derived
#합계 파생 변수 추가
df_var_derived$var_sum <- df_var_derived$var51 + df_var_derived$var52
df_var_derived
df_var_derived$var_avg <- (df_var_derived$var51 + df_var_derived$var52) / 2
df_var_derived
df_var_derived
df_var_derived$var_avg2 <- mean(df_var_derived$var51 + df_var_derived$var52)
df_var_derived
df_var_derived
df_var_derived <- df_var_derived(, -1)
df_var_derived <- df_var_derived[, -1]
df_var_derived
df_var_derived <- df_var_derived[, -1]
df_var_derived
df_var_derived <- df_var_derived[, -1]
df_var_derived
df_var_derived <- df_var_derived[, -1]
df_var_derived
df_var_derived <- df_var_derived[, -1]
df_var_derived
#데이터 프레임 만들기
df_var_derived <- data.frame(var51 = c(4, 3, 8),
var52 = c(2, 6, 1))
df_var_derived
#합계 파생 변수 추가
df_var_derived$var_sum <- df_var_derived$var51 + df_var_derived$var52
df_var_derived$var_avg <- (df_var_derived$var51 + df_var_derived$var52) / 2
df_var_derived
df_var_derived <- df_var_derived[, -5]
df_var_derived
df_var_derived <- df_var_derived[, -4]
df_var_derived
#직접해보기 mpg 통합 연비 변수...
mpg <- as.data.frame(ggplot2::mpg)
mpg$total <- (mpg$cty + mpg$hwy) / 2
mpg
head(mpg)
#통합연비 평균
mean(mpg$total)
#조건문을 활용한 파생변수
#기준값 정하기
summary(mpg$total)
hist(mpg$total
)
#합격 판정 변수 만들기
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
View(mpg)
#빈도표로 합격 자동차 수 확인하기
table(mpg$total)
#빈도표로 합격 자동차 수 확인하기
table(mpg$total)
#빈도표로 합격 자동차 수 확인하기
table(mpg$test)
#막대그래프로 빈도 표현하기
library(ggplot2)
qplot(mpg$test)
# 중첩 조건문 사용하기
# total을 기준으로 A,B,C 등급부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
# 데이터 확인
head(mpg, 20)
# 등급 빈도표 생성
table(mpg$grade)
# 등급빈도 막대 그래프 생성
qplot(mpg$grade)
View(mpg)
#원하는 만큼 범주 만들기
mpg$grade2 <- ifelse(mpg$total >= 30, "30",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
# 데이터 확인
head(mpg, 20)
View(mpg)
exam <- read.csv("../Data/csv_exam.csv")
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
exam
# exam 에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1)
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
# exam 에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
exam %>%  filter(math > 50)
exam %>%  filter(math < 50)
exam %>%  filter(math >= 80)
exam %>%  filter(math <= 80)
exam %>%  filter(english >= 80)
exam %>%  filter(english <= 80)
exam %>%  filter(english <= 80)
#and - 여러 조건을 충족하는 행 추출하기
exam %>% filter (class == 1 & math >= 50)
exam %>% filter (class == 2 & english > 80)
exam %>% filter (class == 2 & english >= 80)
#or - 하나 이상 충족하는 행 추출하기
exam %>%  filter (math >= 90 | english >= 90)
exam %>%  filter (math < 90 | english < 90)
exam %>%  filter (class == 3 & (math < 90 | english < 90))
#목록에 해당하는 행 추출하기
exam %>% filter(class == | class == 3 | clas == 5)
#목록에 해당하는 행 추출하기
exam %>% filter(class == 1 | class == 3 | clas == 5)
#목록에 해당하는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)
exam %>% filter(class %in% c(1, 3, 5))
#추출한 행으로 데이터 만들기
class1 = exam %>% filter(class==1)
class1
class2 = exam %>% filter(class==2)
#1반 수학점수의 평균
mean(class1$math)
#2반 수학점수 평균
mean(class2$math)
View(class2)
View(class1)
#변수 추출하기
exam %>% select(math)
exam %>% select(english)
#여러개의 변수 추출하기
exam %>% select(class, math, english)
#변수 추출하기
exam %>% select(math)
#데이터 프레임 만들기
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
exam
#변수 추출하기
exam %>% select(math)
library(dplyr)
#변수 추출하기
exam %>% select(math)
#여러개의 변수 추출하기
exam %>% select(class, math, english)
#여러개의 변수 추출하기
exam %>% select(class, math, english)
#변수 제거하기
exam %>% select(-math)
#변수 제거하기
exam %>% select(-math)
exam
#여러개 변수 제거
exam %>% select(-math, -english)
#여러개 변수 제거
head(exam %>% select(-math, -english))
#class 가 1인 행만 추출한 다음에 english 만 추출
exam %>% filter(class==1) %>% select(class, english)
#가독성 있게 줄바꾸기 (뒤)
exam %>% filter(class ==1) %>%
select(class, english)
#일부만 출력하기
exam %>%
select(class, english) %>%
head(10)
#일부만 출력하기
exam %>%
select(class, english) %>%
head()
#일부만 출력하기
exam %>%
select(class, english) %>%
head(10)
#math 오름차순 정렬
exam %>% arrange(math)
#math 오름차순 정렬
head(exam %>% arrange(math))
#math 오름차순 정렬
head(exam %>% arrange(math), 10)
#math 내림차순 정렬
exam %>% arrange(desc(math))
#math 내림차순 정렬
head(exam %>% arrange(desc(math)), 10)
#class 오름차순 및 math 내림차순 정렬
exam %>% arrange(class, desc(math))
#파생변수 추가하
exam %>%
mutate(total = math + english + science)
#파생변수 추가하
head(exam) %>%
mutate(total = math + english + science)
exam %>%
mutate(total = math + english + science,
mean = (math + english + science) / 3)
head(exam) %>%
mutate(total = math + english + science,
mean = (math + english + science) / 3)
exam %>%
mutate(total = math + english + science,
mean = (math + english + science) / 3) %>%
head()
exam %>%
mutate(total = math + english + science,
mean = (math + english + science) / 3) %>%
head(10)
#mutate() 에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
arrange(total) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>% #총합 변수 추가
arrange(total) %>%                           #총합 변수 기준 오름차순 정렬
head                                         #일부만 출
#데이터 프레임 만들기
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
#math 평균 산출 (--> 요약)
exam %>% summarise(mean_math = mean(math))
#집단별로 요약하기
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))
#여러 요약 통계량 한번에 산출하기
exam %>%
group_by(class) %>%                    # class 별로 분리
summarise(mean_math = mean(math),      # math 평균
sum_math = sum(math),        # math 합계
median_math = median(math),  # math 중앙값
n =n())
#회사별로 "suv" 자동차의 도시 및 고속도로를 통합 연비 평균을 구해
#내림차순으로 정하고, 1~5위까지 출력하시오
mpg = as.data.frame(ggplot2::mpg)
mpg
head(mpg)
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (cty + hwy) / 2) %>%
summarise(mean_tot = mean(tot)) %>%
head(10)
mpg %>%
group_by(manufacturer) %>%            #회사별로 분리
filter(class == "suv") %>%            #suv 추
mutate(tot = (cty + hwy) / 2) %>%
summarise(mean_tot = mean(tot)) %>%
head(10)
mpg %>%
group_by(manufacturer) %>%            #회사별로 분리
filter(class == "suv") %>%            #suv 추
mutate(tot = (cty + hwy) / 2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(10)
mpg %>%
group_by(manufacturer) %>%            #회사별로 분리
filter(class == "suv") %>%            #suv 추
mutate(tot = (cty + hwy) / 2) %>%     #통합 연비 변수 생성 후 추가
summarise(mean_tot = mean(tot)) %>%   #통합 연비 평균 산출
arrange(desc(mean_tot)) %>%           #내림차순 정렬
head(10)                              #10위까지 출력
#중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
test1
test2
#기말고사 데잍 ㅓ생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(70, 83, 65, 95, 80))
test2
total <- left_join(test1, test2, by = "id")
total
test1
#중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
#기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
finalterm = c(70, 83, 65, 95, 80))
total <- left_join(test1, test2, by = "id")
total
#기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 6),
finalterm = c(70, 83, 65, 95, 80))
total <- left_join(test1, test2, by = "id")
total
#중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
#기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
finalterm = c(70, 83, 65, 95, 80))
test1
test2
total <- left_join(test1, test2, by = "id")
total
namve <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
View(namve)
remove(namve)
name <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
exam
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
#중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
#기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
finalterm = c(70, 83, 65, 95, 80))
#id 기준으로 합쳐서 total에 할
total <- left_join(test1, test2, by = "id")
name <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
exam_new <- left_join(exam, name, by = "class")
View(exam_new)
View(exam_new)
## 세로로 데이터 합치기
#학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),
test = c(60, 80, 70, 90, 85))
#학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),
test = c(70, 83, 65, 95, 80))
group_a
group_b
#데이터 합쳐서 group_all 에 할당
group_all <- bind_rows(group_a, group_b)
group_all
#결측치가 포함된 데이터 프레임 생성
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
df
#결측치 확인
is.na(df)
#결측치 빈도 출력
table(is.na(df))
table(is.na(df$sex))
table(is.na(df$score))
#평균산출
mean(df$score)
sum(df$score)
#---------------------------------------------------#
#결측치 제거
#dplyr 패키지 로드
library(dplyr)
#score 가 NA인 데이터만 출력
df %>% filter(is.na(score))
#score 결측치를 제거
df %>% filter(!is.na(score))
df_nomiss <- df %>% filter(!is.na(score))
mean(df_nomiss)
mean(df_nomiss$score)
#score, sex 결측치 제거
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
df_nomiss2 <- na.omit(df)
df_nomiss2
##------------------------------------------------------------------##
#함수의 결측치 제외 기능 이용하
mean(df$score)
mean(df$score, na.rm = T)
sum(df$score, na.rm = t)
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
exam <- read.csv("../Doit_R-master/Data/df_csv_exam2_re.csv", fileEncoding = "UTF-8")
#결측치가 포함된 데이터 프레임 생성
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
exam2 <- read.csv("../Doit_R-master/Data/df_csv_exam2_re.csv", fileEncoding = "UTF-8")
exam2
exam2[c(3,8,15), "math"] <- NA
exam2
#math 평균 산출
exam2 %>%  summarise(mean_math = mean(math))
#math 결측치 제외하고 평균 산출
exam2 %>% summarise(mean_math = mean(math, na.rm = T))
exam2 %>% summarise(sum_math = sum(math, na.rm = T))
exam2 %>% summarise(mean_math = mean(math, na.rm = T),
sum_math = sum(math, na.rm = T),
median_math = median(math, na.rm = T))
#결측치를 제외하고 math 평균 산출
mean_math = mean(math, na.rm = T)
#결측치를 제외하고 math 평균 산출
exam2 %>% mean_math = mean(math, na.rm = T)
#결측치를 제외하고 math 평균 산출
exam2 %>% summarise(mean_math = mean(math, na.rm = T))
#math 가 NA면 평균값으로 결측치를 대체
exam2$math <- ifelse(is.na(exam2$math),
exam2 %>% summarise(mean_math = mean(math, na.rm = T))
, exam$math)
#math 가 NA면 평균값으로 결측치를 대체
exam2$math <- ifelse(is.na(exam2$math),
exam2 %>% summarise(mean_math = mean(math, na.rm = T))
, exam2$math)
#결측치 빈도표 생성
table(is.na(exam2$math))
exam2
#math 평균 산출
mean(exam2$math)
exam2
#math 평균 산출
mean(exam2$math)
#math 가 NA면 평균값으로 결측치를 대체
exam2$math <- ifelse(is.na(exam2$math),
55)
#math 가 NA면 평균값으로 결측치를 대체
exam2$math <- ifelse(is.na(exam2$math), 55, exam2$math)
#결측치 빈도표 생성
table(is.na(exam2$math))
#math 평균 산출
mean(exam2$math)
exam <- read.csv("../Doit_R-master/Data/df_csv_exam2_re.csv", fileEncoding = "UTF-8")
#결측치 삽입
exam[c(3,8,15), "math"] <- NA
exam
#math 결측치 제외하고 평균 산출 (계산해보니, 결측치는 아예 인원에서도 제외됨. 20명에 결측치 3명 제외 17명으로 평균)
exam %>% summarise(mean_math = mean(math, na.rm = T))
exam %>% summarise(mean_math = mean(math, na.rm = T),
sum_math = sum(math, na.rm = T),
median_math = median(math, na.rm = T))
#결측치를 제외하고 math 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))
#math 가 NA면 평균값으로 결측치를 대체
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
#결측치 빈도표 생성
table(is.na(exam2$math))
#결측치 빈도표 생성
table(is.na(exam$math))
#math 평균 산출
mean(exam$math)
#math 가 NA면 평균값으로 결측치를 대체
exam$math <- ifelse(is.na(exam$math), exam %>% summarise(mean_math = mean(math, na.rm = T)), exam$math)
#math 평균 산출
mean(exam$math)
