outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1),
score = c(5, 4, 3, 4, 2, 6))
outlier
#이상치 확인하기
table(outlier$sex)
table(outlier$score)
#이상치 값을 결측처리하기 : sex 가 3이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
#이상치 값을 결측처리하기 : score가 5보다 크면 NA할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
library(dplyr)
#결측치 제거하여 최종적으러 이상치 정제하기
outlier %>%
filter(!is.na(sex) & !is.na(score) %>%
group_by(sex) %>%
summarise(mean_score = mean(score)))
library(dplyr)
#결측치 제거하여 최종적으러 이상치 정제하기
outlier %>%
filter(!is.na(sex) & !is.na(score) %>%
group_by(sex) %>%
summarise(mean_score = mean(score)))
#결측치 제거하여 최종적으러 이상치 정제하기
outlier %>%
filter(!is.na(sex) & !is.na(score) %>%
group_by(sex) %>%
summarise(mean_score = mean(score)))
#결측치 제거하여 최종적으러 이상치 정제하기
outlier
summarise(mean_score = mean(score))
#결측치 제거하여 최종적으러 이상치 정제하기
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#극단치 - boxplot 을 살펴보면 확인할 수 있음.
boxplot(outlier)
#산점도 만들기
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
#산점도 만들기
library(ggplot2)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
#배경에 산점도 축
ggplot(data = mpg, aes(x = displ, y = hwy) + geom_point())
#배경에 산점도 축
ggplot(data = mpg, aes(x = displ, y = hwy) + geom_point())
#산점도 만들기
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
#배경에 산점도 축
ggplot(data = mpg, aes(x = displ, y = hwy) + geom_point())
#배경에 산점도 축
ggplot(data = mpg, aes(x = displ, y = hwy))
#배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy) + geom_point())
#배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
#x축 범위 3~으로 지정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
#y축 범위 10~30 dmfh wlwjd
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
xlim(3, 6) +
ylim(10, 30)
library(ggplot2)
#집단간 평균표 만들기
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
library(dplyr)
#집단간 평균표 만들기
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
#그래프 생성하기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
#크기 순으로 정렬하기
# - 막대는 기본적으로 범주의 알파벳 순서로 저열ㄹ됨
# - reorder() 를 사용하면 값의 크기 순으로 정렬할 수 있다
# - 정렬 기준 변수 앞에 - 기호를 붙이면 내림차순으로 정렬
ggplot(data = df_mpg, x = reorder(drv, mean_hwy), y = mean_hwy)) + geom_col()
#크기 순으로 정렬하기
# - 막대는 기본적으로 범주의 알파벳 순서로 저열ㄹ됨
# - reorder() 를 사용하면 값의 크기 순으로 정렬할 수 있다
# - 정렬 기준 변수 앞에 - 기호를 붙이면 내림차순으로 정렬
ggplot(data = df_mpg, aes(x = reorder(drv, mean_hwy), y = mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
#빈도 막대 그래프 만들기
#y축 없이 x축만 지정하고 geom_col() 대신에 geom_bar() 를 사용한다.
ggplot(data = mpg, aes(x = drv)) + geom_bar()
ggplot(data = mpg, aes(x = hwy)) + geom_bar()
library(ggplot2)
ggplot(data = economics, aes(x = data, y = unemploy)) + geom_line()
library(ggplot2)
ggplot(data = economics, aes(x = data, y = unemploy)) + geom_line()
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
Sys.getlocale()
Sys.getenv()
Sys.getenv("JAVA_HOME")
#패키지 설치
install.packages("rJava")
install.packages("rJava")
install.packages("memoise")
install.packages("KoNLP")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
#패키지 로드
library(rJava)
library(KoNLP)
library(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
#패키지 로드
library(rJava)
library(KoNLP)
library(dplyr)
#패키지 로드
library(rJava)
library(KoNLP)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
#패키지 로드
library(rJava)
library(KoNLP)
useNIADic()
#데이터 불러오기
txtData <- readLines("../Doit_R-master/Data")
#데이터 불러오기
txtData <- readLines("../Doit_R-master/Data/hiphop.txt")
#데이터 불러오기
txtData <- readLines("../Doit_R-master/Data/hiphop.txt")
#데이터 불러오기
txtData <- readLines("/Doit_R-master/Data/hiphop.txt")
#액셀 파일 불러오기
df_excel <- read_excel("D:\\kchy12345\\SourceTree\\RData\\Doit_R-master\\Data\\excel_exam.xlsx")
#데이터 프레임 만들기
exam <- read.csv("../Doit_R-master/Data/csv_exam.csv")
#데이터 불러오기
txtData <- readLines("Doit_R-master/Data/hiphop.txt")
head(txtData)
tail(txtData)
install.packages("stringr")
install.packages("stringr")
#패키지 로드
library(rJava)
library(KoNLP)
library(dplyr)
library(stringr)
head(txtData)
#특수문자 제거
txtData <- str_replace_all(txtData, "\\w", " ")
head(txtData)
#데이터 불러오기
#글로벌 옵션의 워크스페이스 따라가기때문에, 설정 바꿨다면 알아서 조정해야한다
txtData <- readLines("Doit_R-master/Data/hiphop.txt")
#특수문자 제거
txtData <- str_replace_all(txtData, "\\W", " ")
#명사 추출 테스트
extractNoun("동해물과 백두산이 마르고 닳도록 하느님이 보우하사")
useNIADic()
#가사에서 명사 추출
extractNoun(txtData)
#추출한 명사 List를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
#가사에서 명사 추출
nouns <- extractNoun(txtData)
#추출한 명사 List를 문자열 벡터로 변환, 단어별 빈도표 생성
wordcount <- table(unlist(nouns))
#데이터프레임으로 변환
df_word <- as.data.frame(wordcount, stringsAsFactors = F)
#변수명 설정
df_word <- rename(df_word,
word = Var1,
freq = Freq)
df_word
#두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
df_word
#두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
#두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
df_word
#두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
#상위 20개 단어 추출
top_20 <- df_word %>%
arrange(desc(freq)) %>%
head(20)
top_20
#--------------------------------------------------------------#
#워드 클라우드 만들기
install.packages("wordcoloud")
#패키지 로드
library(wordcloud)
library(RColorBrewer)
#--------------------------------------------------------------#
#워드 클라우드 만들기
install.packages("wordcloud")
#패키지 로드
library(wordcloud)
library(RColorBrewer)
#Dark2 색상 목록에서 8개 색상 추출
pal <- brewer.pal(8, "Dark2")
#난수 고정하기
set.seed(1234)
#워드클라우드 생성
wordcloud(words = dr_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#난수 고정하기
set.seed(1234)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#난수 고정하기
set.seed(1234)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#난수 고정하기
set.seed(1234)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
#난수 고정하기
set.seed(1234)
#워드클라우드 생성
wordcloud(words = df_word$word,
freq = df_word$freq,
min.freq = 2,
max.words = 200,
random.order = F,
rot.per = .1,
scale = c(4, 0.3),
colors = pal)
