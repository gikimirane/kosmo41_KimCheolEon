/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.33
 * Generated at: 2018-09-07 01:02:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("\t<title>NaverLoginSDK Test with BootStrap</title>\r\n");
      out.write("\t<!-- Bootstrap -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\r\n");
      out.write("\t crossorigin=\"anonymous\">\r\n");
      out.write("\t<!-- Optional theme -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\"\r\n");
      out.write("\t crossorigin=\"anonymous\">\r\n");
      out.write("\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\t.header,body{padding-bottom:20px}.header,.jumbotron{border-bottom:1px solid #e5e5e5}body{padding-top:20px}.footer,.header,.marketing{padding-right:15px;padding-left:15px}.header h3{margin-top:0;margin-bottom:0;line-height:40px}.footer{padding-top:19px;color:#777;border-top:1px solid #e5e5e5}@media (min-width:768px){.container{max-width:730px}}.container-narrow>hr{margin:30px 0}.jumbotron{text-align:center}.jumbotron .btn{padding:14px 24px;font-size:21px}.marketing{margin:40px 0}.marketing p+h4{margin-top:28px}@media screen and (min-width:768px){.footer,.header,.marketing{padding-right:0;padding-left:0}.header{margin-bottom:30px}.jumbotron{border-bottom:0}}\r\n");
      out.write("\t</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"header clearfix\">\r\n");
      out.write("\t\t\t<nav>\r\n");
      out.write("\t\t\t\t<ul class=\"nav nav-pills pull-right\">\r\n");
      out.write("\t\t\t\t\t<li role=\"presentation\" class=\"active\"><a href=\"#\">Home</a></li>\r\n");
      out.write("\t\t\t\t\t<li role=\"presentation\"><a id=\"gnbLogin\" href=\"#\">Login</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</nav>\r\n");
      out.write("\t\t\t<h3 class=\"text-muted\">Login With NaverID Javascript SDK</h3>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div id=\"naverIdLogin\">\r\n");
      out.write("\t\t\t<a id=\"naverIdLogin_loginButton\" href=\"#\" role=\"button\"><img src=\"https://static.nid.naver.com/oauth/big_g.PNG\" width=320></a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<!-- /container -->\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-1.12.1.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- (2) LoginWithNaverId Javscript SDK -->\r\n");
      out.write("\t<script src=\"naveridlogin_js_sdk_2.0.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- (3) LoginWithNaverId Javscript 설정 정보 및 초기화 -->\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar naverLogin = new naver.LoginWithNaverId(\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tclientId: \"7GGPebPKABVtWKTBFn_A\",\r\n");
      out.write("\t\t\t\tcallbackUrl: \"http://localhost:8081/SNS_NaverLogin/login.jsp\",\r\n");
      out.write("\t\t\t\tisPopup: false,\r\n");
      out.write("\t\t\t\tloginButton: {color: \"green\", type: 3, height: 60}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t);\r\n");
      out.write("\t\t/* (4) 네아로 로그인 정보를 초기화하기 위하여 init을 호출 */\r\n");
      out.write("\t\tnaverLogin.init();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* (4-1) 임의의 링크를 설정해줄 필요가 있는 경우 */\r\n");
      out.write("\t\t$(\"#gnbLogin\").attr(\"href\", naverLogin.generateAuthorizeUrl());\r\n");
      out.write("\r\n");
      out.write("\t\t/* (5) 현재 로그인 상태를 확인 */\r\n");
      out.write("\t\twindow.addEventListener('load', function () {\r\n");
      out.write("\t\t\tnaverLogin.getLoginStatus(function (status) {\r\n");
      out.write("\t\t\t\tif (status) {\r\n");
      out.write("\t\t\t\t\t/* (6) 로그인 상태가 \"true\" 인 경우 로그인 버튼을 없애고\r\n");
      out.write("\t\t\t\t\t   사용자 정보를 출력합니다. */\r\n");
      out.write("\t\t\t\t\tsetLoginStatus();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t/* (6) 로그인 상태가 \"true\" 인 경우 로그인 버튼을 없애고\r\n");
      out.write("\t\t   사용자 정보를 출력합니다. */\r\n");
      out.write("\t\tfunction setLoginStatus() {\r\n");
      out.write("\t\t\tconsole.log(naverLogin.user);\r\n");
      out.write("\t\t\tvar uid = naverLogin.user.getId();\r\n");
      out.write("\t\t\tvar profileImage = naverLogin.user.getProfileImage();\r\n");
      out.write("\t\t\tvar uName = naverLogin.user.getName();\r\n");
      out.write("\t\t\tvar nickName = naverLogin.user.getNickName();\r\n");
      out.write("\t\t\tvar eMail = naverLogin.user.getEmail();\r\n");
      out.write("\t\t\t$(\"#naverIdLogin_loginButton\").html(\r\n");
      out.write("\t\t\t\t\t'<br><br><img src=\"' + profileImage + \r\n");
      out.write("\t\t\t\t\t'\" height=50 /> <p>' + uid + \"-\" + uName + '님 반갑습니다.</p>');\r\n");
      out.write("\t\t\t$(\"#gnbLogin\").html(\"Logout\");\r\n");
      out.write("\t\t\t$(\"#gnbLogin\").attr(\"href\", \"#\");\r\n");
      out.write("\t\t\t/* (7) 로그아웃 버튼을 설정하고 동작을 정의합니다. */\r\n");
      out.write("\t\t\t$(\"#gnbLogin\").click(function () {\r\n");
      out.write("\t\t\t\tnaverLogin.logout();\r\n");
      out.write("\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
