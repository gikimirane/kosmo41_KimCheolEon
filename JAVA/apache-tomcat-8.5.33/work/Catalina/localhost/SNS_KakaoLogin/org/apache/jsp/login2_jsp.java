/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.33
 * Generated at: 2018-09-07 01:46:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Kakao JavaScript SDK - Custom Login Button</title>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width\"/>\r\n");
      out.write("    <script src=\"http://code.jquery.com/jquery.js\"></script>\r\n");
      out.write("    <script src=\"//developers.kakao.com/sdk/js/kakao.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"login\" style=\"display: block\">\r\n");
      out.write("    <a id=\"custom-login-btn\" href=\"javascript:loginWithKakao()\">\r\n");
      out.write("    <img src=\"//mud-kage.kakao.com/14/dn/btqbjxsO6vP/KPiGpdnsubSq3a0PHEGUK1/o.jpg\" width=\"300\"/>\r\n");
      out.write("    </a>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"logout\" style=\"display: none;\">\r\n");
      out.write("    <input type=\"button\" class=\"btn btn-success\" onclick=\"signOut();\" value=\"로그아웃\" /><br>\r\n");
      out.write("\r\n");
      out.write("    <img id=\"upic\" src=\"\"><br>\r\n");
      out.write("   \t<span id=\"uname\"></span>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type='text/javascript'>\r\n");
      out.write("    Kakao.init('8beb03cd0b3e1684f92220e9b0c345bf');\r\n");
      out.write("    function loginWithKakao() {\r\n");
      out.write("      // 로그인 창을 띄웁니다.\r\n");
      out.write("      Kakao.Auth.login({\r\n");
      out.write("        success: function(authObj) {\r\n");
      out.write("          //alert(JSON.stringify(authObj));\r\n");
      out.write("          signIn(authObj);\r\n");
      out.write("        },\r\n");
      out.write("        fail: function(err) {\r\n");
      out.write("          alert(JSON.stringify(err));\r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    function signIn(authObj) {\r\n");
      out.write("        //console.log(authObj);\r\n");
      out.write("        Kakao.API.request({\r\n");
      out.write("            url: '/v2/user/me',\r\n");
      out.write("            success: function(res) {\r\n");
      out.write("                //console.log(res);\r\n");
      out.write("                console.log(res.id);\r\n");
      out.write("                $('#login').css('display', 'none');\r\n");
      out.write("               \t$('#logout').css('display', 'block');\r\n");
      out.write("                $('#upic').attr('src', res.properties.thumbnail_image );\r\n");
      out.write("               \t$('#uname').html('[ ' + res.properties.nickname + ' ]');\r\n");
      out.write("             }\r\n");
      out.write("         })\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("    function signOut() {\r\n");
      out.write("\t    Kakao.Auth.logout(function () {\r\n");
      out.write("\t    \t$('#login').css('display', 'block');\r\n");
      out.write("\t    \t$('#logout').css('display', 'none');\r\n");
      out.write("\t    \t$('#upic').attr('src', '');\r\n");
      out.write("\t    \t$('#uname').html('');\r\n");
      out.write("\t    });\r\n");
      out.write("\t}\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
